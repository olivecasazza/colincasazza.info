# cargo-features = ["resolver"]

[package]
name = "flock"
version = "0.1.0"
authors = ["Colin Casazza <colanzio5@gmail.com>"]
edition = "2018"
resolver = "2"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
wasm-bindgen = "0.2.63"
typenum = "1.15.0"
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }
js-sys = "0.3.56"

async-std = "1.10.0"
find_folder = "0.3"
getrandom = "0.2.3"
image = "0.23"
instant = "0.1.9"
lyon = "0.17"
# nannou = { version ="0.18.0", features = ["std", "serde"] }
nannou_core = { version ="0.18.0", features = ["std", "serde"] }
nannou_mesh = { version ="0.18.0", features = ["serde1"] }
nannou_wgpu = { version ="0.18.0", features = ["capturer"] }
noise = "0.7"
notosans = { version = "0.1", optional = true }
num_cpus = "1"
pennereq = "0.3"
rusttype = { version = "0.8", features = ["gpu_cache"] }
serde = "1"
serde_derive = "1"
serde_json = "1"
toml = "0.5"
walkdir = "2"
web-sys = { version = "0.3.55", optional = true }
wgpu_upstream = { version = "0.11.1", package = "wgpu" }
winit = "0.26"

[features]
default = ["console_error_panic_hook", "notosans"]
# Enables SPIR-V support in the `wgpu` module.
spirv = ["nannou_wgpu/spirv"]
# Enables experimental WASM compilation for CI-use only
wasm-experimental = ["getrandom/js", "web-sys", "wgpu_upstream/webgl", "async-std/unstable"]

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
